# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import spec_pb2 as spec__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in spec_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ClientAccountStub(object):
    """Define a gRPC service for client-server communication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAccount = channel.unary_unary(
                '/ClientAccount/CreateAccount',
                request_serializer=spec__pb2.CreateAccountRequest.SerializeToString,
                response_deserializer=spec__pb2.ServerResponse.FromString,
                _registered_method=True)
        self.ListUsers = channel.unary_unary(
                '/ClientAccount/ListUsers',
                request_serializer=spec__pb2.ListUsersRequest.SerializeToString,
                response_deserializer=spec__pb2.Users.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/ClientAccount/Login',
                request_serializer=spec__pb2.LoginRequest.SerializeToString,
                response_deserializer=spec__pb2.ServerResponse.FromString,
                _registered_method=True)
        self.Send = channel.unary_unary(
                '/ClientAccount/Send',
                request_serializer=spec__pb2.SendRequest.SerializeToString,
                response_deserializer=spec__pb2.ServerResponse.FromString,
                _registered_method=True)
        self.GetMessages = channel.unary_unary(
                '/ClientAccount/GetMessages',
                request_serializer=spec__pb2.ReceiveRequest.SerializeToString,
                response_deserializer=spec__pb2.Messages.FromString,
                _registered_method=True)
        self.GetChat = channel.unary_unary(
                '/ClientAccount/GetChat',
                request_serializer=spec__pb2.ChatRequest.SerializeToString,
                response_deserializer=spec__pb2.Messages.FromString,
                _registered_method=True)
        self.AcknowledgeReceivedMessages = channel.unary_unary(
                '/ClientAccount/AcknowledgeReceivedMessages',
                request_serializer=spec__pb2.AcknowledgeReceivedMessagesRequest.SerializeToString,
                response_deserializer=spec__pb2.ServerResponse.FromString,
                _registered_method=True)
        self.DeleteAccount = channel.unary_unary(
                '/ClientAccount/DeleteAccount',
                request_serializer=spec__pb2.DeleteAccountRequest.SerializeToString,
                response_deserializer=spec__pb2.ServerResponse.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/ClientAccount/Logout',
                request_serializer=spec__pb2.DeleteAccountRequest.SerializeToString,
                response_deserializer=spec__pb2.ServerResponse.FromString,
                _registered_method=True)


class ClientAccountServicer(object):
    """Define a gRPC service for client-server communication
    """

    def CreateAccount(self, request, context):
        """Define an RPC for creating an account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Define an RPC for listing all users in the database
        rpc ListUsers(Empty) returns (Users);

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Define an RPC for logging in to an account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Send(self, request, context):
        """Define an RPC for sending a message to a recipient
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessages(self, request, context):
        """Define an RPC for receiving messages
        rpc SubscribeMessage(ReceiveRequest) returns (stream Message);

        Define an RPC for receiving messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcknowledgeReceivedMessages(self, request, context):
        """Define an RPC for receiving messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Define an RPC for deleting an account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Define an RPC for logging out of an account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientAccountServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccount,
                    request_deserializer=spec__pb2.CreateAccountRequest.FromString,
                    response_serializer=spec__pb2.ServerResponse.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=spec__pb2.ListUsersRequest.FromString,
                    response_serializer=spec__pb2.Users.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=spec__pb2.LoginRequest.FromString,
                    response_serializer=spec__pb2.ServerResponse.SerializeToString,
            ),
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=spec__pb2.SendRequest.FromString,
                    response_serializer=spec__pb2.ServerResponse.SerializeToString,
            ),
            'GetMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessages,
                    request_deserializer=spec__pb2.ReceiveRequest.FromString,
                    response_serializer=spec__pb2.Messages.SerializeToString,
            ),
            'GetChat': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChat,
                    request_deserializer=spec__pb2.ChatRequest.FromString,
                    response_serializer=spec__pb2.Messages.SerializeToString,
            ),
            'AcknowledgeReceivedMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.AcknowledgeReceivedMessages,
                    request_deserializer=spec__pb2.AcknowledgeReceivedMessagesRequest.FromString,
                    response_serializer=spec__pb2.ServerResponse.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=spec__pb2.DeleteAccountRequest.FromString,
                    response_serializer=spec__pb2.ServerResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=spec__pb2.DeleteAccountRequest.FromString,
                    response_serializer=spec__pb2.ServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ClientAccount', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ClientAccount', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClientAccount(object):
    """Define a gRPC service for client-server communication
    """

    @staticmethod
    def CreateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ClientAccount/CreateAccount',
            spec__pb2.CreateAccountRequest.SerializeToString,
            spec__pb2.ServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ClientAccount/ListUsers',
            spec__pb2.ListUsersRequest.SerializeToString,
            spec__pb2.Users.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ClientAccount/Login',
            spec__pb2.LoginRequest.SerializeToString,
            spec__pb2.ServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ClientAccount/Send',
            spec__pb2.SendRequest.SerializeToString,
            spec__pb2.ServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ClientAccount/GetMessages',
            spec__pb2.ReceiveRequest.SerializeToString,
            spec__pb2.Messages.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ClientAccount/GetChat',
            spec__pb2.ChatRequest.SerializeToString,
            spec__pb2.Messages.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AcknowledgeReceivedMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ClientAccount/AcknowledgeReceivedMessages',
            spec__pb2.AcknowledgeReceivedMessagesRequest.SerializeToString,
            spec__pb2.ServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ClientAccount/DeleteAccount',
            spec__pb2.DeleteAccountRequest.SerializeToString,
            spec__pb2.ServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ClientAccount/Logout',
            spec__pb2.DeleteAccountRequest.SerializeToString,
            spec__pb2.ServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MasterServiceStub(object):
    """Define a gRPC service for master server communication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterSlave = channel.unary_unary(
                '/MasterService/RegisterSlave',
                request_serializer=spec__pb2.RegisterSlaveRequest.SerializeToString,
                response_deserializer=spec__pb2.RegisterSlaveResponse.FromString,
                _registered_method=True)
        self.HeartBeat = channel.unary_unary(
                '/MasterService/HeartBeat',
                request_serializer=spec__pb2.Empty.SerializeToString,
                response_deserializer=spec__pb2.Ack.FromString,
                _registered_method=True)
        self.CheckMaster = channel.unary_unary(
                '/MasterService/CheckMaster',
                request_serializer=spec__pb2.Empty.SerializeToString,
                response_deserializer=spec__pb2.Ack.FromString,
                _registered_method=True)


class MasterServiceServicer(object):
    """Define a gRPC service for master server communication
    """

    def RegisterSlave(self, request, context):
        """Define an RPC for registering a slave
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HeartBeat(self, request, context):
        """when a slave checks in, master send a response if it doesn't leader elction will be triggered
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckMaster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterSlave': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterSlave,
                    request_deserializer=spec__pb2.RegisterSlaveRequest.FromString,
                    response_serializer=spec__pb2.RegisterSlaveResponse.SerializeToString,
            ),
            'HeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeat,
                    request_deserializer=spec__pb2.Empty.FromString,
                    response_serializer=spec__pb2.Ack.SerializeToString,
            ),
            'CheckMaster': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckMaster,
                    request_deserializer=spec__pb2.Empty.FromString,
                    response_serializer=spec__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MasterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('MasterService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MasterService(object):
    """Define a gRPC service for master server communication
    """

    @staticmethod
    def RegisterSlave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MasterService/RegisterSlave',
            spec__pb2.RegisterSlaveRequest.SerializeToString,
            spec__pb2.RegisterSlaveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MasterService/HeartBeat',
            spec__pb2.Empty.SerializeToString,
            spec__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckMaster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MasterService/CheckMaster',
            spec__pb2.Empty.SerializeToString,
            spec__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SlaveServiceStub(object):
    """Define a gRPC service for slave server communication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AcceptUpdates = channel.unary_unary(
                '/SlaveService/AcceptUpdates',
                request_serializer=spec__pb2.AcceptUpdatesRequest.SerializeToString,
                response_deserializer=spec__pb2.ServerResponse.FromString,
                _registered_method=True)
        self.UpdateMaster = channel.unary_unary(
                '/SlaveService/UpdateMaster',
                request_serializer=spec__pb2.NewMasterRequest.SerializeToString,
                response_deserializer=spec__pb2.Ack.FromString,
                _registered_method=True)
        self.UpdateSlaves = channel.unary_unary(
                '/SlaveService/UpdateSlaves',
                request_serializer=spec__pb2.UpdateSlavesRequest.SerializeToString,
                response_deserializer=spec__pb2.Ack.FromString,
                _registered_method=True)


class SlaveServiceServicer(object):
    """Define a gRPC service for slave server communication
    """

    def AcceptUpdates(self, request, context):
        """Define an RPC for accepting updates from the master
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMaster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSlaves(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SlaveServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AcceptUpdates': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptUpdates,
                    request_deserializer=spec__pb2.AcceptUpdatesRequest.FromString,
                    response_serializer=spec__pb2.ServerResponse.SerializeToString,
            ),
            'UpdateMaster': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMaster,
                    request_deserializer=spec__pb2.NewMasterRequest.FromString,
                    response_serializer=spec__pb2.Ack.SerializeToString,
            ),
            'UpdateSlaves': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSlaves,
                    request_deserializer=spec__pb2.UpdateSlavesRequest.FromString,
                    response_serializer=spec__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SlaveService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('SlaveService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SlaveService(object):
    """Define a gRPC service for slave server communication
    """

    @staticmethod
    def AcceptUpdates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SlaveService/AcceptUpdates',
            spec__pb2.AcceptUpdatesRequest.SerializeToString,
            spec__pb2.ServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateMaster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SlaveService/UpdateMaster',
            spec__pb2.NewMasterRequest.SerializeToString,
            spec__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSlaves(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/SlaveService/UpdateSlaves',
            spec__pb2.UpdateSlavesRequest.SerializeToString,
            spec__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
